//AsyncTask was intended to enable proper and easy use of the UI thread. 
//However, the most common use case was for integrating into UI, and that would cause Context leaks, missed callbacks, or crashes on configuration changes
//An asynchronous task is defined by a computation that runs on a background thread and whose result is published on the UI thread
//n asynchronous task is defined by 3 generic types, called Params, Progress and Result
//4 steps, called onPreExecute, doInBackground, onProgressUpdate and onPostExecute.

private class DownloadFilesTask extends AsyncTask<URL, Integer, Long> {
     protected Long doInBackground(URL... urls) {
         int count = urls.length;
         long totalSize = 0;
         for (int i = 0; i < count; i++) {
             totalSize += Downloader.downloadFile(urls[i]);
             publishProgress((int) ((i / (float) count) * 100));
             // Escape early if cancel() is called
             if (isCancelled()) break;
         }
         return totalSize;
     }

     protected void onProgressUpdate(Integer... progress) {
         setProgressPercent(progress[0]);
     }

     protected void onPostExecute(Long result) {
         showDialog("Downloaded " + result + " bytes");
     }
 }
